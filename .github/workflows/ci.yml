name: ci

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: detect changes
    runs-on: ubuntu-latest
    outputs:
      js: ${{ steps.filter.outputs.js }}
      ts: ${{ steps.filter.outputs.ts }}
      py: ${{ steps.filter.outputs.py }}
      go: ${{ steps.filter.outputs.go }}
      cs: ${{ steps.filter.outputs.cs }}
      cpp: ${{ steps.filter.outputs.cpp }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            js:
              - '**/*.js'
            ts:
              - '**/*.ts'
            py:
              - '**/*.py'
            go:
              - '**/*.go'
            cs:
              - '**/*.cs'
              - '**/*.csproj'
              - '**/*.sln'
            cpp:
              - '**/*.cpp'
              - '**/*.cc'
              - '**/*.c'
              - '**/*.hpp'
              - '**/*.h'
            docs:
              - '**/*.md'
              - '.github/**/*.yml'
              - '.github/**/*.yaml'

  python:
    needs: changes
    if: ${{ needs.changes.outputs.py == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: pipx install black ruff || true
      - run: black --check . || true
      - run: ruff . || true

  node:
    needs: changes
    if: ${{ needs.changes.outputs.js == 'true' || needs.changes.outputs.ts == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "package-lock.json"
      - name: Install dev deps (cached)
        run: npm ci --prefer-offline --no-audit --no-fund
      - name: ESLint (JS changed)
        if: ${{ needs.changes.outputs.js == 'true' }}
        run: npm run lint:js || true
      - name: TypeScript type-check (TS changed)
        if: ${{ needs.changes.outputs.ts == 'true' }}
        run: npm run typecheck || true

  docs:
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "package-lock.json"
      - name: Install dev deps (cached)
        run: npm ci --prefer-offline --no-audit --no-fund
      - name: Prettier check (docs & workflow files)
        run: npm run format:check:docs || true

  go:
    needs: changes
    if: ${{ needs.changes.outputs.go == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - run: go fmt ./... || true
      - run: go vet ./... || true
      - run: go test ./... || true

  csharp:
    needs: changes
    if: ${{ needs.changes.outputs.cs == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
      - run: dotnet build -c Release || true
      - run: dotnet format --verify-no-changes || true

  cpp:
    needs: changes
    if: ${{ needs.changes.outputs.cpp == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: C++ format check (if clang-format available)
        run: |
          if command -v clang-format >/dev/null 2>&1; then
            echo "clang-format found"
          else
            echo "clang-format not installed"
          fi
